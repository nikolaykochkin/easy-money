version: '3.9'

services:
  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    networks:
      - easy-money-net
    volumes:
      - postgres-data:/var/lib/postgresql/data

  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka-data:/bitnami"
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    networks:
      - easy-money-net

  minio:
    image: quay.io/minio/minio:latest
    hostname: minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9090:9090"
    networks:
      - easy-money-net
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9090"
  
  backend-application:
    build:
      context: ./backend-application
      network: host
    image: backend-application:local
    hostname: backend-application
    container_name: backend-application
    environment:
      SERVER_PORT: ${SERVER_PORT}
      AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DB_URL: ${DB_URL}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      KAFKA_BOOTSTRAP: ${KAFKA_BOOTSTRAP}
      BOT_TOKEN: ${BOT_TOKEN}
      BOT_NAME: ${BOT_NAME}
    ports:
      - ${SERVER_PORT}
    networks:
      - easy-money-net
    volumes:
      - "backend-app-data:/tmp"
    depends_on:
      - postgres
      - kafka
      - minio

  spark-master:
    image: apache/spark:3.4.0
    hostname: spark-master
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - "spark-work-dir:/opt/spark/work-dir"
    environment:
      SPARK_HOME: /opt/spark
    networks:
      - easy-money-net
    entrypoint: "/usr/bin/tini -s -- /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master"

  spark-worker:
    image: apache/spark:3.4.0
    hostname: spark-worker
    container_name: spark-worker
    ports:
      - "8081:8081"
      - "7000:7000"
    volumes:
      - "spark-work-dir:/opt/spark/work-dir"
    environment:
      SPARK_HOME: /opt/spark
    networks:
      - easy-money-net
    depends_on:
      - spark-master
    entrypoint: "/usr/bin/tini -s -- /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker --port 7000 spark://spark-master:7077"

  spark-builder:
    build:
      context: ./spark-qr-decoder
    hostname: spark-builder
    container_name: spark-builder
    volumes:
      - "spark-work-dir:/opt/spark/work-dir"
    environment:
      SPARK_HOME: /opt/spark
      AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: easy-money
      KAFKA_BOOTSTRAP: ${KAFKA_BOOTSTRAP}
      MASTER: spark://spark-master:7077
      PHOTO_INPUT_TOPIC: spark-photo
      PHOTO_OUTPUT_TOPIC: spark-photo-decoded
    networks:
      - easy-money-net
    restart: no

networks:
  easy-money-net:
    driver: bridge

volumes:
  postgres-data:
  kafka-data:
  backend-app-data:
  spark-work-dir:
